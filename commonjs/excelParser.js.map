{"version":3,"sources":["../excelParser.js"],"names":["parseXlsx","ns","a","select","useNamespaces","letters","extractFiles","path","sheet","files","strings","stream","createReadStream","Promise","resolve","reject","filePromises","pipe","Parse","on","all","then","entry","file","contents","push","data","toString","autodrain","calculateDimensions","cells","comparator","b","allRows","map","cell","row","sort","allCols","column","minRow","maxRow","length","minCol","maxCol","extractData","values","DOMParser","parseFromString","valuesDoc","string","_","textContent","join","parseError","Cell","d","split","CellCoords","cols","rows","times","value","type","parseInt","i","notEmpty","j","splice","n","action","colToInt","col","trim","indexOf","coords","cellNode","getAttribute"],"mappings":"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","file":"excelParser.js","sourcesContent":["import fs from 'fs';\r\nimport Stream from 'stream';\r\nimport unzip from 'unzipper';\r\nimport xpath from 'xpath';\r\nimport XMLDOM from 'xmldom';\r\n\r\nconst ns = { a: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main' };\r\nconst select = xpath.useNamespaces(ns);\r\n\r\nconst letters = [\"\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\n\r\nfunction extractFiles(path, sheet) {\r\n  const files = {\r\n    strings: {},\r\n    sheet: {},\r\n    'xl/sharedStrings.xml': 'strings',\r\n    [`xl/worksheets/sheet${sheet}.xml`]: 'sheet'\r\n  };\r\n\r\n  const stream = path instanceof Stream ? path : fs.createReadStream(path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const filePromises = [];\r\n\r\n    stream\r\n      .pipe(unzip.Parse())\r\n      .on('error', reject)\r\n      .on('close', () => {\r\n        Promise.all(filePromises).then(() => resolve(files));\r\n      })\r\n      // For some reason `end` event is not emitted.\r\n      // .on('end', () => {\r\n      //   Promise.all(filePromises).then(() => resolve(files));\r\n      // })\r\n      .on('entry', (entry) => {\r\n        const file = files[entry.path];\r\n        if (file) {\r\n          let contents = '';\r\n          filePromises.push(new Promise((resolve) => {\r\n            entry\r\n              .on('data', data => contents += data.toString())\r\n              .on('end', () => {\r\n                files[file].contents = contents;\r\n                resolve();\r\n              });\r\n          }));\r\n        } else {\r\n          entry.autodrain();\r\n        }\r\n      });\r\n  });\r\n}\r\n\r\nfunction calculateDimensions (cells) {\r\n  const comparator = (a, b) => a - b;\r\n  const allRows = cells.map(cell => cell.row).sort(comparator);\r\n  const allCols = cells.map(cell => cell.column).sort(comparator);\r\n  const minRow = allRows[0];\r\n  const maxRow = allRows[allRows.length - 1];\r\n  const minCol = allCols[0];\r\n  const maxCol = allCols[allCols.length - 1];\r\n\r\n  return [\r\n    { row: minRow, column: minCol },\r\n    { row: maxRow, column: maxCol }\r\n  ];\r\n}\r\n\r\nfunction extractData(files) {\r\n  let sheet;\r\n  let values;\r\n  const data = [];\r\n\r\n  try {\r\n    sheet = new XMLDOM.DOMParser().parseFromString(files.sheet.contents);\r\n    const valuesDoc = new XMLDOM.DOMParser().parseFromString(files.strings.contents);\r\n    values = select('//a:si', valuesDoc)\r\n      .map(string => select('.//a:t[not(ancestor::a:rPh)]', string).map(_ => _.textContent).join(''));\r\n  } catch(parseError){\r\n    return [];\r\n  }\r\n\r\n  const cells = select('/a:worksheet/a:sheetData/a:row/a:c', sheet).map(Cell);\r\n\r\n  let d = select('//a:dimension/@ref', sheet, 1);\r\n  if (d) {\r\n    d = d.textContent.split(':').map(CellCoords);\r\n  } else {\r\n    d = calculateDimensions(cells);\r\n  }\r\n\r\n  const cols = d[1].column - d[0].column + 1;\r\n  const rows = d[1].row - d[0].row + 1;\r\n\r\n  times(rows, () => {\r\n    const row = [];\r\n    times(cols, () => row.push(''));\r\n    data.push(row);\r\n  });\r\n\r\n  for (const cell of cells) {\r\n    let value = cell.value;\r\n\r\n    if (cell.type === 's') {\r\n      value = values[parseInt(value)];\r\n    }\r\n\r\n    if (data[cell.row - d[0].row]) {\r\n      data[cell.row - d[0].row][cell.column - d[0].column] = value;\r\n    }\r\n  }\r\n\r\n  if (data.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  // Trim trailing empty columns.\r\n  let i = data[0].length - 1;\r\n  while (i >= 0) {\r\n    let notEmpty;\r\n    for (const row of data) {\r\n      if (row[i]) {\r\n        // Column is not empty.\r\n        notEmpty = true;\r\n        break;\r\n      }\r\n    }\r\n    if (notEmpty) {\r\n      break;\r\n    }\r\n    let j = 0;\r\n    while (j < data.length) {\r\n      data[j].splice(i, 1);\r\n      j++;\r\n    }\r\n    i--;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport default function parseXlsx(path, sheet = '1') {\r\n  return extractFiles(path, sheet).then((files) => extractData(files));\r\n};\r\n\r\nfunction times(n, action) {\r\n  let i = 0;\r\n  while (i < n) {\r\n    action();\r\n    i++;\r\n  }\r\n}\r\n\r\nfunction colToInt(col) {\r\n  col = col.trim().split('');\r\n\r\n  let n = 0;\r\n\r\n  for (let i = 0; i < col.length; i++) {\r\n    n *= 26;\r\n    n += letters.indexOf(col[i]);\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\nfunction CellCoords(coords) {\r\n  coords = coords.split(/(\\d+)/);\r\n  return {\r\n    row: parseInt(coords[1]),\r\n    column: colToInt(coords[0])\r\n  };\r\n}\r\n\r\nfunction Cell(cellNode) {\r\n  const coords = CellCoords(cellNode.getAttribute('r'));\r\n  const value = select('a:v', cellNode, 1);\r\n  return {\r\n    column: coords.column,\r\n    row: coords.row,\r\n    value: value && value.textContent && value.textContent.trim() || '',\r\n    type: cellNode.getAttribute('t')\r\n  };\r\n}"]}