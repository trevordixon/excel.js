{"version":3,"sources":["../excelParser.js"],"names":["parseXlsx","extractFiles","path","sheet","files","strings","stream","createReadStream","Promise","resolve","reject","filePromises","pipe","Parse","on","all","then","entry","file","contents","push","data","toString","autodrain","calculateDimensions","cells","comparator","a","b","allRows","map","cell","row","sort","allCols","column","minRow","maxRow","length","minCol","maxCol","extractData","ns","values","parseXml","find","string","t","text","join","parseError","colToInt","col","letters","trim","split","n","i","indexOf","na","value","CellCoords","parseInt","Cell","cellNode","r","attr","type","get","coords","node","d","_","cols","rows","times","action"],"mappings":"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","file":"excelParser.js","sourcesContent":["import fs from 'fs';\r\nimport Stream from 'stream';\r\nimport unzip from 'node-unzip-2';\r\nimport libxmljs from 'libxmljs';\r\n\r\nfunction extractFiles(path, sheet) {\r\n  const files = {\r\n    strings: {},\r\n    sheet: {},\r\n    'xl/sharedStrings.xml': 'strings',\r\n    [`xl/worksheets/sheet${sheet}.xml`]: 'sheet'\r\n  };\r\n\r\n  const stream = path instanceof Stream ? path : fs.createReadStream(path);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const filePromises = [];\r\n\r\n    stream\r\n      .pipe(unzip.Parse())\r\n      .on('error', reject)\r\n      .on('close', () => {\r\n        Promise.all(filePromises).then(() => resolve(files));\r\n      })\r\n      // For some reason `end` event is not emitted.\r\n      // .on('end', () => {\r\n      //   Promise.all(filePromises).then(() => resolve(files));\r\n      // })\r\n      .on('entry', (entry) => {\r\n        const file = files[entry.path];\r\n        if (file) {\r\n          let contents = '';\r\n          filePromises.push(new Promise((resolve) => {\r\n            entry\r\n              .on('data', data => contents += data.toString())\r\n              .on('end', () => {\r\n                files[file].contents = contents;\r\n                resolve();\r\n              });\r\n          }));\r\n        } else {\r\n          entry.autodrain();\r\n        }\r\n      });\r\n  });\r\n}\r\n\r\nfunction calculateDimensions (cells) {\r\n  const comparator = (a, b) => a - b;\r\n  const allRows = cells.map(cell => cell.row).sort(comparator);\r\n  const allCols = cells.map(cell => cell.column).sort(comparator);\r\n  const minRow = allRows[0];\r\n  const maxRow = allRows[allRows.length - 1];\r\n  const minCol = allCols[0];\r\n  const maxCol = allCols[allCols.length - 1];\r\n\r\n  return [\r\n    { row: minRow, column: minCol },\r\n    { row: maxRow, column: maxCol }\r\n  ];\r\n}\r\n\r\nfunction extractData(files) {\r\n  const ns = { a: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main' };\r\n  let sheet;\r\n  let values;\r\n  const data = [];\r\n\r\n  try {\r\n    sheet = libxmljs.parseXml(files.sheet.contents);\r\n    values = libxmljs.parseXml(files.strings.contents)\r\n      .find('//a:si', ns)\r\n      .map(string => string.find('.//a:t[not(ancestor::a:rPh)]', ns)\r\n      .map(t => t.text()).join(''));\r\n  } catch(parseError){\r\n    return [];\r\n  }\r\n\r\n  function colToInt(col) {\r\n    const letters = [\"\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\n    col = col.trim().split('');\r\n\r\n    let n = 0;\r\n\r\n    for (let i = 0; i < col.length; i++) {\r\n      n *= 26;\r\n      n += letters.indexOf(col[i]);\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n  const na = {\r\n    value: () => '',\r\n    text: () => ''\r\n  };\r\n\r\n  class CellCoords {\r\n    constructor(cell) {\r\n      cell = cell.split(/([0-9]+)/);\r\n      this.row = parseInt(cell[1]);\r\n      this.column = colToInt(cell[0]);\r\n    }\r\n  }\r\n\r\n  class Cell {\r\n    constructor(cellNode) {\r\n      const r = cellNode.attr('r').value();\r\n      const type = (cellNode.attr('t') || na).value();\r\n      const value = (cellNode.get('a:v', ns) || na ).text();\r\n      const coords = new CellCoords(r)\r\n\r\n      this.column = coords.column;\r\n      this.row = coords.row;\r\n      this.value = value;\r\n      this.type = type;\r\n    }\r\n  }\r\n\r\n  const cells = sheet.find('/a:worksheet/a:sheetData/a:row/a:c', ns).map(node => new Cell(node));\r\n\r\n  let d = sheet.get('//a:dimension/@ref', ns);\r\n  if (d) {\r\n    d = d.value().split(':').map(_ => new CellCoords(_));\r\n  } else {\r\n    d = calculateDimensions(cells);\r\n  }\r\n\r\n  const cols = d[1].column - d[0].column + 1;\r\n  const rows = d[1].row - d[0].row + 1;\r\n\r\n  times(rows, () => {\r\n    const row = [];\r\n    times(cols, () => row.push(''));\r\n    data.push(row);\r\n  });\r\n\r\n  for (const cell of cells) {\r\n    let value = cell.value;\r\n\r\n    if (cell.type == 's') {\r\n      value = values[parseInt(value)];\r\n    }\r\n\r\n    if (data[cell.row - d[0].row]) {\r\n      data[cell.row - d[0].row][cell.column - d[0].column] = value;\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport default function parseXlsx(path, sheet = '1') {\r\n  return extractFiles(path, sheet).then((files) => extractData(files));\r\n};\r\n\r\nfunction times(n, action) {\r\n  let i = 0;\r\n  while (i < n) {\r\n    action();\r\n    i++;\r\n  }\r\n}\r\n"]}